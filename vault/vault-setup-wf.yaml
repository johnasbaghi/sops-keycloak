apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  annotations:
    argocd.argoproj.io/hook: PostSync
  name: vault-setup
spec:
  arguments:
    parameters:
      - name: secret-name
        value: vault-initial-secret
      - name: oidc-issuer
        value: https://auth.localhost/realms/dev-test
      - name: oidc-client
        value: vault-prod
      - name: oidc-secret
        value: l2FLwizbuasxP2OaxXqPeBwCkyOZ4ux2
      - name: vault-domain
        value: https://vault.localhost
  entrypoint: main
  imagePullSecrets: []
  templates:
    - dag:
        tasks:
          - name: init-status
            template: init-status
          - depends: init-status.Failed
            name: initialize
            template: initialize
          - arguments:
              parameters:
                - name: json
                  value: '{{tasks.initialize.outputs.result}}'
            depends: initialize.Succeeded
            name: save-secret
            template: save-secret
          - depends: save-secret.Succeeded || init-status.Succeeded
            name: check-secret
            template: check-secret
          - depends: check-secret
            name: unseal
            template: create-wf
            when: '{{=tasks[''check-secret''].outputs.parameters.name == workflow.parameters[''secret-name'']}}'
          - depends: unseal.Succeeded
            name: wait-unseal
            template: wait-wf
          - depends: wait-unseal && initialize.Succeeded
            name: auth-setup
            template: auth-setup
          - depends: wait-unseal
            name: create-cron
            template: create-cron
      name: main
    - container:
        args:
          - vault operator init -status
        command:
          - sh
          - -c
        env:
          - name: VAULT_ADDR
            value: https://vault-0.vault-internal:8200
          - name: VAULT_CACERT
            value: /certs/ca-bundle.pem
        image: hashicorp/vault:1.14.2
        name: main
        volumeMounts:
          - mountPath: /certs/ca-bundle.pem
            name: ca-bundle
            subPath: ca-bundle.pem
      name: init-status
    - name: initialize
      script:
        command:
          - sh
          - -c
        env:
          - name: VAULT_ADDR
            value: https://vault-0.vault-internal:8200
          - name: VAULT_CACERT
            value: /certs/ca-bundle.pem
        image: hashicorp/vault:1.14.2
        name: main
        source: vault operator init -key-shares=1 -key-threshold=1 -format=json
        volumeMounts:
          - mountPath: /certs/ca-bundle.pem
            name: ca-bundle
            subPath: ca-bundle.pem
    - inputs:
        parameters:
          - name: json
      name: save-secret
      resource:
        action: apply
        manifest: |
          apiVersion: v1
          kind: Secret
          metadata:
            name: {{workflow.parameters.secret-name}}
          stringData:
            root_token: "{{=jsonpath(inputs.parameters.json, '$.root_token')}}"
            unseal_key: "{{=jsonpath(inputs.parameters.json, '$.unseal_keys_b64[0]')}}"
    - name: check-secret
      outputs:
        parameters:
          - name: name
            valueFrom:
              jsonPath: '{.metadata.name}'
      resource:
        action: get
        flags:
          - --ignore-not-found=true
        manifest: |
          apiVersion: v1
          kind: Secret
          metadata:
            name: {{workflow.parameters.secret-name}}
    - name: create-wf
      resource:
        action: create
        manifest: |
          apiVersion: argoproj.io/v1alpha1
          kind: Workflow
          metadata:
            name: vault-unseal
          spec:
            workflowTemplateRef:
              clusterScope: false
              name: vault-unseal
        setOwnerReference: true
    - name: wait-wf
      resource:
        action: get
        failureCondition: status.phase in (Failed, Error)
        manifest: |
          apiVersion: argoproj.io/v1alpha1
          kind: Workflow
          metadata:
            name: vault-unseal
        successCondition: status.phase == Succeeded
    - container:
        args:
          - |
            vault auth enable approle

            vault write auth/approle/role/infralytics-admin \
              token_policies="infralytics-admin" \
              token_ttl=1h token_max_ttl=4h

            vault auth enable -listing-visibility=unauth oidc

            vault write auth/oidc/config \
              oidc_discovery_url="{{workflow.parameters.oidc-issuer}}" \
              oidc_discovery_ca_pem=@/certs/ca-bundle.pem \
              oidc_client_id="{{workflow.parameters.oidc-client}}" \
              oidc_client_secret="{{workflow.parameters.oidc-secret}}" \
              default_role="keycloak-default"

            vault write auth/oidc/role/keycloak-default \
              bound_audiences="{{workflow.parameters.oidc-client}}" \
              allowed_redirect_uris="{{workflow.parameters.vault-domain}}/ui/vault/auth/oidc/oidc/callback" \
              allowed_redirect_uris="http://localhost:8250/oidc/callback" \
              user_claim="preferred_username" \
              oidc_scopes="profile,groups" groups_claim=groups \
              token_policies="default"

            vault secrets enable -path infralytics -version=2 kv

            accessor=$(vault read -field=accessor sys/auth/oidc)
            pairs="admin=SMARTeam infralytics-admin=Infralytics-Admins infralytics-reader=Infralytics-Users"

            for pair in $pairs; do
              group=$(echo $pair | cut -d "=" -f1)
              alias=$(echo $pair | cut -d "=" -f2 | sed "s/-/ /g")
              vault policy write $group $group.hcl
              id=$(vault write -field=id identity/group name="$group" policies="$group" type="external")
              vault write identity/group-alias name="$alias" mount_accessor="$accessor" canonical_id="$id"
            done
        command:
          - sh
          - -c
        env:
          - name: VAULT_ADDR
            value: https://vault-0.vault-internal:8200
          - name: VAULT_CACERT
            value: /certs/ca-bundle.pem
          - name: VAULT_TOKEN
            valueFrom:
              secretKeyRef:
                key: root_token
                name: '{{workflow.parameters.secret-name}}'
        image: hashicorp/vault:1.14.2
        name: main
        volumeMounts:
          - mountPath: /certs/ca-bundle.pem
            name: ca-bundle
            subPath: ca-bundle.pem
          - mountPath: /tmp
            name: policies
        workingDir: /tmp
      name: auth-setup
      volumes:
        - configMap:
            name: vault-policies
          name: policies
    - name: create-cron
      resource:
        action: create
        manifest: |
          apiVersion: argoproj.io/v1alpha1
          kind: CronWorkflow
          metadata:
            name: vault-unseal
          spec:
            schedule: '*/15 * * * *'
            workflowSpec:
              workflowTemplateRef:
                name: vault-unseal
        setOwnerReference: true
  ttlStrategy: {}
  volumes:
    - configMap:
        name: ca-bundle
      name: ca-bundle
